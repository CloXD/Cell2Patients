}
dir_name=paste0(outdirbase, "/non_null_simulation/3_truth")
if (! dir.exists(dir_name) ){
dir.create(dir_name, recursive = T)
}
dir_name=paste0(outdirbase, "/non_null_simulation/1_reads/rsem_files")
if (! dir.exists(dir_name) ){
dir.create(dir_name, recursive = T)
}
message("Writing result files...")
write.table(final_summary, file = paste0(outdirbase, "/non_null_simulation/",
"3_truth/simulation_details.txt"),
row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "\t")
for (i in 1:(2 * nbr_per_group)) {
tmp <- isoform.initial
tmp$TPM <- final_summary[match(tmp$transcript_id,
final_summary$transcript_id),
paste0("s", i, "_isoformTPM")]
tmp$TPM <- round(tmp$TPM, digits = 2)
tmp$TPM <- as.character(tmp$TPM)
tmp$TPM[tmp$TPM == "0"] <- "0.00"
tmp$expected_count <- as.character(tmp$expected_count)
tmp$expected_count[tmp$expected_count == "0"] <- "0.00"
tmp$FPKM <- as.character(tmp$FPKM)
tmp$FPKM[tmp$FPKM == "0"] <- "0.00"
tmp$IsoPct <- as.character(tmp$IsoPct)
tmp$IsoPct[tmp$IsoPct == "0"] <- "0.00"
write.table(tmp, file = paste0(outdirbase, "/non_null_simulation/1_reads/",
"rsem_files/sample", i, ".txt"),
row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "\t")
}
## Keep only transcripts from selected chromosomes
if (!is.null(keepchr)) {
final_summary_keepchr <- final_summary
idx <- grep("_isoformTPM", colnames(final_summary_keepchr))
for (i in idx) {
final_summary_keepchr[!(final_summary_keepchr$chromosome_name %in% keepchr), i] <- 0
final_summary_keepchr[, i] <-
final_summary_keepchr[, i]/sum(final_summary_keepchr[, i]) * 1e6
}
write.table(final_summary_keepchr[final_summary_keepchr$chromosome_name %in% keepchr, ],
file = paste0(outdirbase, "/non_null_simulation/",
"3_truth/simulation_details_chr",
paste(keepchr, collapse = "_"), ".txt"),
row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "\t")
for (i in 1:(2 * nbr_per_group)) {
tmp <- isoform.initial
tmp$TPM <- final_summary_keepchr[match(tmp$transcript_id,
final_summary_keepchr$transcript_id),
paste0("s", i, "_isoformTPM")]
tmp$TPM <- round(tmp$TPM, digits = 2)
tmp$TPM <- as.character(tmp$TPM)
tmp$TPM[tmp$TPM == "0"] <- "0.00"
tmp$expected_count <- as.character(tmp$expected_count)
tmp$expected_count[tmp$expected_count == "0"] <- "0.00"
tmp$FPKM <- as.character(tmp$FPKM)
tmp$FPKM[tmp$FPKM == "0"] <- "0.00"
tmp$IsoPct <- as.character(tmp$IsoPct)
tmp$IsoPct[tmp$IsoPct == "0"] <- "0.00"
write.table(tmp, file = paste0(outdirbase, "/non_null_simulation/1_reads/",
"rsem_files/sample", i, "_chr",
paste(keepchr, collapse = "_"), ".txt"),
row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "\t")
}
}
seed=123
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl",
host = "uswest.ensembl.org")
library(biomaRt)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl",
host = "uswest.ensembl.org")
isoform_results_file="/poolzfs/home/lorenzi/simulation/rsem_model/SRR493366.isoforms.results"
nbr_per_group=30
seed=123
isoform_results_file="/poolzfs/home/lorenzi/simulation/rsem_model/SRR493366.isoforms.results"
nbr_per_group=30
meandisp.file="/poolzfs/home/lorenzi/simulation/ref/Pickrell.Cheung.Mu.Phi.Estimates.rds"
outdirbase="/poolzfs/home/lorenzi/simulation/rsem_sim_models"
librarysize=40000000
librarysize=40000000
rdirichlet2 <- function(n, alpha) {
a <- rdirichlet(n, alpha)
a[is.na(a)] <- 0
a
}
message("Reading isoform results file...")
isoform.initial <- read.delim(isoform_results_file, header = TRUE, as.is = TRUE)
message("Creating gene summary...")
gene_summary <- isoform.initial %>% group_by(gene_id) %>%
summarise(expected_gene_count_gr1 = sum(expected_count),
effective_gene_length = sum(effective_length * IsoPct/100),
nbr_isoforms = length(IsoPct),
nbr_expr_isoforms = length(which(IsoPct > 0)),
nbr_expr_isoforms10 = length(which(IsoPct > 10)))
gene_summary
isoform.initial
gene_summary <- isoform.initial %>% group_by(gene_id) %>%
summarise(expected_gene_count_gr1 = sum(expected_count),
effective_gene_length = sum(effective_length * IsoPct/100),
nbr_isoforms = length(IsoPct),
nbr_expr_isoforms = length(which(IsoPct > 0)),
nbr_expr_isoforms10 = length(which(IsoPct > 10)))
expected_count
isoform.initial
message("Creating gene summary...")
gene_summary <- isoform.initial %>% group_by(gene_id) %>%
summarise(expected_gene_count_gr1 = sum(expected_count),
effective_gene_length = sum(effective_length * IsoPct/100),
nbr_isoforms = length(IsoPct),
nbr_expr_isoforms = length(which(IsoPct > 0)),
nbr_expr_isoforms10 = length(which(IsoPct > 10)))
gene_summary <- isoform.initial %>% group_by(gene_id) %>%
summarise(expected_gene_count_gr1 = sum(expected_count),
effective_gene_length = sum(effective_length * IsoPct/100),
nbr_isoforms = length(IsoPct),
nbr_expr_isoforms = length(which(IsoPct > 0)),
nbr_expr_isoforms10 = length(which(IsoPct > 10)))
isoform.initial$gene_id
gene_summary <- isoform.initial %>% group_by(gene_id)
library(gtools)
library(dplyr)
library(biomaRt)
gene_summary <- isoform.initial %>% group_by(gene_id) %>%
summarise(expected_gene_count_gr1 = sum(expected_count),
effective_gene_length = sum(effective_length * IsoPct/100),
nbr_isoforms = length(IsoPct),
nbr_expr_isoforms = length(which(IsoPct > 0)),
nbr_expr_isoforms10 = length(which(IsoPct > 10)))
str(gene_summary)
gene_summary$expected_gene_count_gr2 <- gene_summary$expected_gene_count_gr1
gene_summary$expected_gene_count_gr2
gene_summary
str(gene_summary)
gene_summary$gene_de_status <- 0
str(gene_summary)
diff_spliced="/poolzfs/home/lorenzi/simulation/ds_transcripts.ls"
diff_expr="/poolzfs/home/lorenzi/simulation/de_genes.ls"
keepchr="ALL"
runif(nbr_diff_expr)
final_summary
library(Biostrings)
ref_fasta=  readDNAStringSet("/poolzfs/home/lorenzi/Utility/refs/hg38/STAR/GRCh38.primary_assembly.genome.fa")
mod_fasta = readDNAStringSet("/poolzfs/home/lorenzi/simulation/mod_ref/mod_genome.fa")
names(ref_fasta)
ref_fasta[names(ref_fasta)=="chr1 1"]
ref_fasta[names(ref_fasta)=="chr1 1"][[1]]
ref_fasta[names(ref_fasta)=="chr1 1"][[1]][203723942]
mod_fasta[names(ref_fasta)=="chr1 1"][[1]][203723942]
mod_fasta[names(mod_fasta)=="chr1 1"][[1]][203723942]
ref_fasta[names(ref_fasta)=="chr1 1"][[1]][203723941]
mod_fasta[names(mod_fasta)=="chr1 1"][[1]][203723941]
ref_fasta[names(ref_fasta)=="chr1 1"][[1]][203723943]
mod_fasta[names(mod_fasta)=="chr1 1"][[1]][203723943]
a=c(1, 2, 10 , 0.5 , 3, 5)
b=c(2, 4, 7 , 1 , 1 , 3 , 8)
wilcox.test(a, b)
a <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)
b <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29, 1.18)
wilcox.test(a, b)
wilcox.test(a, b, paired=F)
wilcox.test(a, b, paired=F, exact=F)
ln = read.table("~/Showcases/CLL/LR/data.tsv", header=T, stringsAsFactors = F)
ln = read.table("~/Showcases/CLL/LR/data.tsv", header=T, stringsAsFactors = F)
nbc = read.table("~/Showcases/CLL/NBC/data.tsv", header=T, stringsAsFactors = F)
ln$Gene
joint = merge(ln, nbc, by = "Gene", all = T)
colnames(joint)
joint = merge(data.frame(Gene=ln$Gene, ln=ln$Non.repondeur_x_Repondeur) , data.frame(Gene=nbc$Gene, nbc=nbc$Non.repondeur_x_Repondeur), by = "Gene", all = T)
colnames(joint) = c("Gene", "lr", "nbc")
joint
joint = merge(data.frame(Gene=ln$Gene, ln=ln$Non.repondeur_x_Repondeur) , data.frame(Gene=nbc$Gene, nbc=nbc$Non.repondeur_x_Repondeur), by = "Gene", all = T)
joint
joint$lr[is.na(joint$lr)] = 50
joint$nbc[is.na(joint$nbc)] = 50
joint$lr[is.na(joint$lr)]
is.na(joint$lr)
colnames(joint)
joint
ggplot(joint) + stat_bin_2d(aes(x=lr, y=nbc), binwidth=1 ) +geom_text(aes(x=75 , y=55, label=paste0("Only LR=", sum(joint$nbc == 50))))
library(ggplot2)
ggplot(joint) + stat_bin_2d(aes(x=lr, y=nbc), binwidth=1 ) +geom_text(aes(x=75 , y=55, label=paste0("Only LR=", sum(joint$nbc == 50))))
joint = merge(data.frame(Gene=ln$Gene, lr=ln$Non.repondeur_x_Repondeur) , data.frame(Gene=nbc$Gene, nbc=nbc$Non.repondeur_x_Repondeur), by = "Gene", all = T)
colnames(joint) = c("Gene", "lr", "nbc")
joint$lr[is.na(joint$lr)] = 50
joint$nbc[is.na(joint$nbc)] = 50
ggplot(joint) + stat_bin_2d(aes(x=lr, y=nbc), binwidth=1 )
ggplot(joint) + geom_point(aes(x=lr, y=nbc), binwidth=1 )
ggplot(joint) + geom_point(aes(x=lr, y=nbc))
ggplot(joint) + geom_point(aes(x=lr, y=nbc), position = "jitter")
ggplot(joint) + geom_point(aes(x=lr, y=nbc), position = "dodge")
ggplot(joint) + geom_point(aes(x=lr, y=nbc), position = position_jitter())
ggplot(joint) + geom_point(aes(x=lr, y=nbc))
ggplot(joint) + geom_bar(aes(y=nbc))
ggplot(joint) + geom_bar(aes(x=nbc))
ggplot(joint) + geom_density(aes(x=nbc))
ggplot(joint) + geom_bar(aes(x=nbc))
ggplot(joint) + geom_histogram(aes(x=nbc))
ggplot(joint) + geom_histogram(aes(x=nbc), color="red") +  geom_histogram(aes(x=lr), color="blue")
ggplot(joint) + geom_histogram(aes(x=nbc), fill="red") +  geom_histogram(aes(x=lr), fill="blue")
ggplot(joint) + geom_bin2d(aes(x=lr, y=nbc))
joint = merge(data.frame(Gene=ln$Gene, lr=ln$Non.repondeur_x_Repondeur) , data.frame(Gene=nbc$Gene, nbc=nbc$Non.repondeur_x_Repondeur), by = "Gene", all = T)
colnames(joint) = c("Gene", "lr", "nbc")
sum(is.na(joint$lr))
sum(is.na(joint$nbc))
sum(! is.na(joint$nbc) & ! is.na(joint$lr))
ln[order(ln$Gene, -ln$Non.repondeur_x_Repondeur),]
duplicated(ln$Gene)
ln[duplicated(ln$Gene),]
ln[!duplicated(ln$Gene),]
ln = read.table("~/Showcases/CLL/LR/data.tsv", header=T, stringsAsFactors = F)
nbc = read.table("~/Showcases/CLL/NBC/data.tsv", header=T, stringsAsFactors = F)
ln = ln[order(ln$Gene, -ln$Non.repondeur_x_Repondeur),]
ln = ln[!duplicated(ln$Gene),]
nbc = nbc[order(nbc$Gene, -nbc$Non.repondeur_x_Repondeur),]
nbc = nbc[!duplicated(nbc$Gene),]
joint = merge(data.frame(Gene=ln$Gene, lr=ln$Non.repondeur_x_Repondeur) , data.frame(Gene=nbc$Gene, nbc=nbc$Non.repondeur_x_Repondeur), by = "Gene", all = T)
joint = merge(data.frame(Gene=ln$Gene, lr=ln$Non.repondeur_x_Repondeur, ev=ln$Event) , data.frame(Gene=nbc$Gene, nbc=nbc$Non.repondeur_x_Repondeur, ev=nbc$Event), by = "Gene", all = T)
colnames(joint)
colnames(joint) = c("Gene", "lr", "ev_lr" ,"nbc", "ev_nbc")
sum(is.na(joint$lr))
sum(is.na(joint$nbc))
sum(! is.na(joint$nbc) & ! is.na(joint$lr))
joint$lr[is.na(joint$lr)] = 50
joint$nbc[is.na(joint$nbc)] = 50
ggplot(joint) + geom_bin2d(aes(x=lr, y=nbc))
joint
joint[is.na(joint$Gene),]
ggplot(joint) + geom_bin2d(aes(x=lr, y=nbc), binwidth=1)
library(DESeq2)
version(DESeq2)
install.packages("devtools")
devtools::install_github("BaderLab/HumanLiver")
install.packages("devtools")
devtools::install_github("BaderLab/HumanLiver")
install.packages("devtools")
library(HumanLiver)
viewHumanLiver()
devtools::install_github("BaderLab/HumanLiver")
library(HumanLiver)
viewHumanLiver()
viewHumanLiver()
HumanLiverSeurat$orig.ident
HumanLiverSeurat$Phase
HumanLiverSeurat$S.Score
HumanLiverSeurat$total_counts
HumanLiverSeurat$total_features
str(HumanLiverSeurat)
str(sCVdL)
sCVdL$res.0.8
str(sCVdL$res.0.8)
HumanLiverSeurat@meta.data
HumanLiverSeurat@meta.data
HumanLiverSeurat@meta.data
HumanLiverSeurat@meta.data$res.0.8
HumanLiverSeurat@meta.data$res.0.8
HumanLiverSeurat@meta.data
write.table(data.table(cell=rownames(HumanLiverSeurat@meta.data), cluster=HumanLiverSeurat@meta.data$res.0.8, phase=HumanLiverSeurat@meta.data$Phase) ,file="./cell_cluster_and_phase.tsv", sep="\t")
write.table(data.frame(cell=rownames(HumanLiverSeurat@meta.data), cluster=HumanLiverSeurat@meta.data$res.0.8, phase=HumanLiverSeurat@meta.data$Phase) ,file="./cell_cluster_and_phase.tsv", sep="\t")
library(HumanLiver)
HumanLiverSeurat@meta.data$res.0.8
viewHumanLiver()
HumanLiverSeurat@meta.data$res.0.8
HumanLiverSeurat@meta.data
HumanLiverSeurat@meta.data["P1TLH_TTTGTCATCCTTGACC_1",]
sample_file="/poolzfs/home/lorenzi/BEAUTY/TN_analysis/sources.txt"
count_dir="/poolzfs/home/lorenzi/BEAUTY/TN_analysis/salmon/salmon_counts"
tx2gene_file="/poolzfs/home/lorenzi/Utility/refs/hg38/tx2gene.gencode.v29.tsv"
output_folder="/poolzfs/home/lorenzi/BEAUTY/TN_analysis/salmon/deseq2_results/"
library(readr)
if ( ! library(readr)){
BiocManager::install("readr", lib="~/R/x86_64-pc-linux-gnu-library/3.5/")
library(readr, lib="~/R/x86_64-pc-linux-gnu-library/3.5/")
}
require(readr)
if ( !require(readr)){
BiocManager::install("readr", lib="~/R/x86_64-pc-linux-gnu-library/3.5/")
library(readr, lib="~/R/x86_64-pc-linux-gnu-library/3.5/")
}
equire(samr)
require(samr)
library(samr , lib="~/R/x86_64-pc-linux-gnu-library/3.5/")
library(readr, lib="~/R/x86_64-pc-linux-gnu-library/3.5/")
library(tximport)
files_sources <- read.table(sample_file,  stringsAsFactors=F)
files <- file.path(count_dir , files_sources[,1] , "quant.sf")
informations=data.frame(condition=files_sources[,2] , name = files_sources[,1], stringsAsFactors=F)
tx2gene=read.table(tx2gene_file, stringsAsFactors=F)
conditions = unique(informations$condition)
grpA=1
grpB=2
mask=informations$condition== conditions[grpA] | informations$condition == conditions[grpB]
tmp_info=informations[mask,]
tmp_info$condition=factor(tmp_info$condition)
txi <- tximport(files[mask], type="salmon", txOut=T)
txi_genes <- summarizeToGene(txi, tx2gene)
install.packages("devtools")
devtools::install_gitlab("lbroseus/IRFindeR2", host = "gitlab.igh.cnrs.fr", build_vignettes = TRUE)
devtools::install_gitlab("lbroseus/IRFindeR2", host = "gitlab.igh.cnrs.fr", build_vignettes = TRUE)
library("DescTools")
install.packages("DescTools")
dat=read.table("~/tmp/tmp")
dat
dat
dat=read.table("~/tmp/tmp")
dat
ggplot(dat)+geom_density(aes(x=V1))
library(ggplot2)
ggplot(dat)+geom_density(aes(x=V1))
ggplot(dat)+geom_histogram(aes(x=V1))
ggplot(dat)+geom_histogram(aes(x=V1)bins=10000)
ggplot(dat)+geom_histogram(aes(x=V1),bins=10000)
ggplot(dat)+geom_histogram(aes(x=V1),bins=1000)
sum(dat$V1 > 5000)
sum(dat$V1 > 10000)
sum(dat$V1 > 10000)/ nrow(dat)
sum(dat$V1 > 10000)*100/ nrow(dat)
sum(dat$V1 > 100000)*100/ nrow(dat)
sum(dat$V1 > 100000)
sum(dat$V1 > 100000)*100/ nrow(dat)
sum(dat$V1 > 1e5)*100/ nrow(dat)
sum(dat$V1 > 1e4)*100/ nrow(dat)
sum(dat$V1 > 5e4)*100/ nrow(dat)
ggplot(dat)+geom_histogram(aes(x=V1),bins=1000)+geom_vline(xintercept = 5e4)
5e4
library(ggplot2)
dat=read.table("~/eclipse-workspace/IntronScanner/test/img_generation/")
dat=read.table("~/eclipse-workspace/IntronScanner/test/img_generation/noir.times.tsv")
dat2 = read.table("~/eclipse-workspace/IntronScanner/test/img_generation/noir_noannot.times.tsv")
dat
dat=read.table("~/eclipse-workspace/IntronScanner/test/img_generation/noir.times.tsv", header = T, stringsAsFactors = F)
dat2 = read.table("~/eclipse-workspace/IntronScanner/test/img_generation/noir_noannot.times.tsv", header = T, stringsAsFactors = F)
dat$type= "Annot"
dat2$type= "NoAnnot"
dat = rbind(dat, dat2)
dat
dat
str(dat)
ggplot(dat) + geom_bar(aes(x=Process, y=time, fill=type))
ggplot(dat) + geom_bar(aes(x=Process, y=time, fill=type), stat="identity")
str(dat)
ggplot(dat[dat$Process == "global" , ]) + geom_bar(aes(x=Process, y=time, fill=type), stat="identity")
ggplot(dat[dat$Process == "global" , ]) + geom_bar(aes(x=Process, y=time, fill=type), stat="identity", position = position_dodge())
ggplot(dat[dat$Process == "global" || dat$Process == "preprocess" , ]) + geom_bar(aes(x=Process, y=time, fill=type), stat="identity",
position = position_dodge())
ggplot(dat[dat$Process == "global" | dat$Process == "preprocess" , ]) + geom_bar(aes(x=Process, y=time, fill=type), stat="identity",
position = position_dodge())
ggplot(dat[!(dat$Process == "global" | dat$Process == "preprocess") , ]) + geom_bar(aes(x=Process, y=time, fill=type), stat="identity",
position = position_dodge())
ggplot(dat[!(dat$Process == "global" | dat$Process == "preprocess") , ]) + geom_bar(aes(y=time, fill=type))
ggplot(dat[!(dat$Process == "global" | dat$Process == "preprocess") , ]) + geom_histogram(aes(y=time, x=type))
ggplot(dat[!(dat$Process == "global" | dat$Process == "preprocess") , ]) + geom_histogram(aes(y=time, x=type))
ggplot(dat[!(dat$Process == "global" | dat$Process == "preprocess") , ]) + geom_histogram(aes(y=time, fill=type))
ggplot(dat[!(dat$Process == "global" | dat$Process == "preprocess") , ]) + geom_boxplot(aes(y=time, x=type))
ggplot(dat[!(dat$Process == "global" | dat$Process == "preprocess") , ]) + geom_histogram(aes(y=time, x=type))
ggplot(dat[!(dat$Process == "global" | dat$Process == "preprocess") , ]) + geom_histogram(aes(y=time, x=type), stat = "identity")
library(ggplot2)
read.csv("~/Downloads/PubMed_Timeline_Results_by_Year(1).csv", skip=1)
df=read.csv("~/Downloads/PubMed_Timeline_Results_by_Year(1).csv", skip=1)
ggplot(df) + geom_line(x=Year, y=Count
)
df
str(df)
ggplot(df) + geom_line(x=Year, y=Count)
ggplot(df) + geom_line(aes(x=Year, y=Count))
ggplot(df) + geom_bar(aes(x=Year, y=Count))
ggplot(df) + geom_bar(aes(x=Year, y=Count), stat="identity")
ggplot(df) + geom_bar(aes(x=Year, y=Count),  fill="blue" , stat="identity")
ggplot(df) + geom_bar(aes(x=Year, y=Count),  fill="#067CB0" , stat="identity")
cwd()
getwd()
library(SIRFindeR)
fisher.test(matrix(c(1,2,3,4), 2))
fisher.test(matrix(c(n-(a+b-ab),a-ab,b-ab,ab), 2))
n=12339
a=635
b=192
ab=15
fisher.test(matrix(c(n-(a+b-ab),a-ab,b-ab,ab), 2))
setwd("/home/claudio/git/Cell2Patients")
dat = read.table("./combined_results.tsv", header = T)
dat
dat = read.table("./combined_results.tsv", header = T, stringsAsFactors = F)
dat
str(dat)
dat$resuts_MIX[is.na(dat$resuts_MIX)]="Unlabelled"
dat$resuts_TPM[is.na(dat$resuts_TPM)]="Unlabelled"
dat$resuts_PSI[is.na(dat$resuts_PSI)]="Unlabelled"
library(VennDiagram)
install.packages("VennDiagram")
library(VennDiagram)
library(UpSetR)
install.packages("UpSetR")
library(UpSetR)
upset(dat)
as.data.table(dat)
mutations <- read.csv( system.file("extdata", "mutations.csv", package = "UpSetR"), header=T, sep = ",")
mutations
data=data.frame(ID=dat$ID)
as.numeric(dat$resuts_MIX == "BASALA")
data$MIX_A = as.numeric(dat$resuts_MIX == "BASALA")
data$MIX_B = as.numeric(dat$resuts_MIX == "BASALB")
data$MIX_U = as.numeric(dat$resuts_MIX == "Unlabelled")
data=data.frame(ID=dat$ID)
data$MIX_A = as.numeric(dat$resuts_MIX == "BASALA")
data$MIX_B = as.numeric(dat$resuts_MIX == "BASALB")
data$MIX_U = as.numeric(dat$resuts_MIX == "Unlabelled")
data$PSI_A = as.numeric(dat$resuts_PSI == "BASALA")
data$PSI_B = as.numeric(dat$resuts_PSI == "BASALB")
data$PSI_U = as.numeric(dat$resuts_PSI == "Unlabelled")
data$TPM_A = as.numeric(dat$resuts_TPM == "BASALA")
data$TPM_B = as.numeric(dat$resuts_TPM == "BASALB")
data$TPM_U = as.numeric(dat$resuts_TPM == "Unlabelled")
upset(dat)
upset(data)
upset(data,sets="all"  empty.intersections = "on")
upset(data,sets=9  empty.intersections = "on")
upset(data,sets=9 , empty.intersections = "on")
upset(data,nsets=9 , empty.intersections = "on")
upset(data,nsets=9 )
upset(data,nsets=9, order.by="degree" )
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_A", "PSI_U", "TPM_U", "MIX_U"), order.by="degree" )
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_A", "PSI_U", "TPM_U", "MIX_U") )
data
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_B", "PSI_U", "TPM_U", "MIX_U") )
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_B", "PSI_U", "TPM_U", "MIX_U") ,  empty.intersections = "on")
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_B", "PSI_U", "TPM_U", "MIX_U") ,nintersects = NA)
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_B", "PSI_U", "TPM_U", "MIX_U") ,nintersects = NA, order.by = "degree")
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_B", "PSI_U", "TPM_U", "MIX_U") ,nintersects = NA, order.by = "degree", empty.intersections = 'on')
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_B", "PSI_U", "TPM_U", "MIX_U") ,nintersects = NA, order.by = "frequency", empty.intersections = 'on')
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_B", "PSI_U", "TPM_U", "MIX_U") ,nintersects = NA, empty.intersections = 'on')
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_B", "PSI_U", "TPM_U", "MIX_U") ,nintersects = NA)
pdf("./intersections.pdf")
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_B", "PSI_U", "TPM_U", "MIX_U") ,nintersects = NA)
dev.off()
pdf("./intersections.pdf")
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_B", "PSI_U", "TPM_U", "MIX_U") ,nintersects = NA)
dev.off()
setwd("/home/claudio/git/Cell2Patients")
dat = read.table("./combined_results.tsv", header = T, stringsAsFactors = F)
dat$resuts_MIX[is.na(dat$resuts_MIX)]="Unlabelled"
dat$resuts_TPM[is.na(dat$resuts_TPM)]="Unlabelled"
dat$resuts_PSI[is.na(dat$resuts_PSI)]="Unlabelled"
install.packages("UpSetR")
library(UpSetR)
mutations <- read.csv( system.file("extdata", "mutations.csv", package = "UpSetR"), header=T, sep = ",")
data=data.frame(ID=dat$ID)
data$MIX_A = as.numeric(dat$resuts_MIX == "BASALA")
data$MIX_B = as.numeric(dat$resuts_MIX == "BASALB")
data$MIX_U = as.numeric(dat$resuts_MIX == "Unlabelled")
data$PSI_A = as.numeric(dat$resuts_PSI == "BASALA")
data$PSI_B = as.numeric(dat$resuts_PSI == "BASALB")
data$PSI_U = as.numeric(dat$resuts_PSI == "Unlabelled")
data$TPM_A = as.numeric(dat$resuts_TPM == "BASALA")
data$TPM_B = as.numeric(dat$resuts_TPM == "BASALB")
data$TPM_U = as.numeric(dat$resuts_TPM == "Unlabelled")
pdf("./intersections.pdf")
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_B", "PSI_U", "TPM_U", "MIX_U") ,nintersects = NA)
dev.off()
library(UpSetR)
setwd("/home/claudio/git/Cell2Patients")
dat = read.table("./combined_results.tsv", header = T, stringsAsFactors = F)
dat$resuts_MIX[is.na(dat$resuts_MIX)]="Unlabelled"
dat$resuts_TPM[is.na(dat$resuts_TPM)]="Unlabelled"
dat$resuts_PSI[is.na(dat$resuts_PSI)]="Unlabelled"
mutations <- read.csv( system.file("extdata", "mutations.csv", package = "UpSetR"), header=T, sep = ",")
data=data.frame(ID=dat$ID)
data$MIX_A = as.numeric(dat$resuts_MIX == "BASALA")
data$MIX_B = as.numeric(dat$resuts_MIX == "BASALB")
data$MIX_U = as.numeric(dat$resuts_MIX == "Unlabelled")
data$PSI_A = as.numeric(dat$resuts_PSI == "BASALA")
data$PSI_B = as.numeric(dat$resuts_PSI == "BASALB")
data$PSI_U = as.numeric(dat$resuts_PSI == "Unlabelled")
data$TPM_A = as.numeric(dat$resuts_TPM == "BASALA")
data$TPM_B = as.numeric(dat$resuts_TPM == "BASALB")
data$TPM_U = as.numeric(dat$resuts_TPM == "Unlabelled")
pdf("./intersections.pdf")
upset(data,sets=c("PSI_A", "TPM_A", "MIX_A", "PSI_B", "TPM_B", "MIX_B", "PSI_U", "TPM_U", "MIX_U") ,nintersects = NA)
dev.off()
a="ciao.bello"
substr(a,".bello")
strsplit(a, ".")
strsplit(a, "\.")
strsplit(a, "\\.")
dat= read.table("./resuts_PSI/transfer/feature_importances.tsv", header=T, stringsAsFactors = F)
dat$Generation
str(dat)
max(dat$Generation)
dat[dat$Generation == max(dat$Generation),]
tmp=dat[dat$Generation == max(dat$Generation),]
tmp[order(tmp$Importance, decreasing = T), ]
tmp[order(tmp$Importance, decreasing = T), ][1:10,]
for (f in c("./resuts_PSI/transfer/feature_importances.tsv", "./resuts_TPM/transfer/feature_importances.tsv", "./resuts_MIX/transfer/feature_importances.tsv")){
dat= read.table(f, header=T, stringsAsFactors = F)
tmp=dat[dat$Generation == max(dat$Generation),]
print(f)
print("Best 10 begin:")
tmp=dat[dat$Generation == 0,]
print(tmp[order(tmp$Importance, decreasing = T), ][1:10,])
print("Best 10 end:")
tmp=dat[dat$Generation == max(dat$Generation),]
}
for (f in c("./resuts_PSI/transfer/feature_importances.tsv", "./resuts_TPM/transfer/feature_importances.tsv", "./resuts_MIX/transfer/feature_importances.tsv")){
dat= read.table(f, header=T, stringsAsFactors = F)
tmp=dat[dat$Generation == max(dat$Generation),]
print(f)
print("Best 10 begin:")
tmp=dat[dat$Generation == 0,]
print(tmp[order(tmp$Importance, decreasing = T), ][1:10,])
print("Best 10 end:")
tmp=dat[dat$Generation == max(dat$Generation),]
print(tmp[order(tmp$Importance, decreasing = T), ][1:10,])
}
